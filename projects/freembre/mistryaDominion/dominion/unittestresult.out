---- UnitTest#1 : TESTING getCost() function: -----
Calling getCost() for cardNumber 0...
result = 0, expected = 0
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 1...
result = 2, expected = 2
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 2...
result = 5, expected = 5
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 3...
result = 8, expected = 8
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 4...
result = 0, expected = 0
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 5...
result = 3, expected = 3
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 6...
result = 6, expected = 6
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 7...
result = 6, expected = 6
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 8...
result = 5, expected = 5
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 9...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 10...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 11...
result = 5, expected = 5
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 12...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 13...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 14...
result = 3, expected = 3
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 15...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 16...
result = 3, expected = 3
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 17...
result = 5, expected = 5
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 18...
result = 3, expected = 3
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 19...
result = 5, expected = 5
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 20...
result = 3, expected = 3
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 21...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 22...
result = 2, expected = 2
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 23...
result = 5, expected = 5
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 24...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 25...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 26...
result = 4, expected = 4
>>>>> STATUS:  TEST PASSED <<<<<

Calling getCost() for cardNumber 27...
result = -1, expected = -1
>>>>> STATUS:  TEST PASSED <<<<<

---------------- End of the tests! ----------------

------ UnitTest#2 :TESTING fullDeckCount(): -------
Perform full 30 deck count with all cards as same type...
   player0 count 30 matches expected count 30
>>>>> STATUS:  TEST PASSED <<<<<

Perform full 30 deck count with 3 cards as different type...
    player0 count 27 matches expected count 27
>>>>> STATUS:  TEST PASSED <<<<<

Perform full 30 deck count with all cards as same type...
   player1 count 30 matches expected count 30
>>>>> STATUS:  TEST PASSED <<<<<

Perform full 30 deck count with 3 cards as different type...
    player1 count 27 matches expected count 27
>>>>> STATUS:  TEST PASSED <<<<<

---------------- End of the tests! ----------------

------- UnitTest#3: TESTING isGameOver(): ---------
    The result is 1.. 
    Expected value 1 returned.
    The pile of supplycount of province card is empty!
    The game is over!
>>>>> STATUS:  TEST PASSED <<<<<

    The result is 1.. 
    Expected value 1 returned.
    Three supply piles are empty!
    The game is over!
>>>>> STATUS:  TEST PASSED <<<<<

    The  The result is 0.. 
    Expected value 0 returned.
    Three supply piles are NOT empty!
    The game is NOT over!
>>>>> STATUS:  TEST PASSED <<<<<
---------------- End of the tests! ----------------

--------------- TESTING buyCard(): ----------------
    The result -1 matches expectedValue.

>>>>> STATUS:  TEST PASSED <<<<<

    The result -1 matches expectedValue.
>>>>> STATUS:  TEST PASSED <<<<<

    The result -1 matches expectedValue.
>>>>> STATUS:  TEST PASSED <<<<<

    The result 0 matches expectedValue.
>>>>> STATUS:  TEST PASSED <<<<<

---------------- End of the tests! ----------------

----------------- Testing Card: adventurer ----------------
TEST 1: Gain +2 cards with initial deck
hand count = 8, expected = 7
>>>>> STATUS:  TEST FAILED <<<<<

TEST 1: Gain +2 cards with forced deck shuffle
discard = 2, deck = 0
hand count = 8, expected = 7
>>>>> STATUS:  TEST FAILED <<<<<
------------ Completed Testing Card: adventurer ------------

----------------- Testing Card: smithy ----------------
TEST 1: Gain +3 cards with initial deck
hand count = 9, expected = 8
>>>>> STATUS:  TEST FAILED <<<<<
deck count = 0, expected = 2
>>>>> STATUS:  TEST FAILED <<<<<
------------ Completed Testing Card: smithy ------------

----------------- Testing Card: council_room ----------------
TEST 1: Player 1 Gain +4 cards, other Players Gain +1 card
Player0: hand count = 8, expected = 8
>>>>> STATUS:  TEST PASSED <<<<<
Player0: deck count = 1, expected = 1
>>>>> STATUS:  TEST PASSED <<<<<

Player1: hand count = 1, expected = 1
>>>>> STATUS:  TEST PASSED <<<<<
Player1: deck count = 9, expected = 9
>>>>> STATUS:  TEST PASSED <<<<<

Player2: hand count = 1, expected = 1
>>>>> STATUS:  TEST PASSED <<<<<
Player2: deck count = 9, expected = 9
>>>>> STATUS:  TEST PASSED <<<<<

Player3: hand count = 1, expected = 1
>>>>> STATUS:  TEST PASSED <<<<<
Player3: deck count = 9, expected = 9
>>>>> STATUS:  TEST PASSED <<<<<

------------ Completed Testing Card: council_room ------------

----------------- Testing Card: sea_hag ----------------
TEST 1: Each of the other players except first player ends up with 'curse' top card

Player1: top deck card = 0, expected = 0
>>>>> STATUS:  TEST PASSED <<<<<

Player2: top deck card = 0, expected = 0
>>>>> STATUS:  TEST PASSED <<<<<

Player3: top deck card = 0, expected = 0
>>>>> STATUS:  TEST PASSED <<<<<

------------ Completed Testing Card: sea_hag ------------

File 'dominion.c'
Lines executed:40.96% of 564
Branches executed:43.88% of 417
Taken at least once:34.29% of 417
Calls executed:23.96% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 180 returned 100% blocks executed 83%
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 4 returned 100% blocks executed 88%
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
call    0 returned 100%
        4:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       16:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       16:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       16:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 37 returned 100% blocks executed 100%
       37:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       37:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       37:  209:  if (state->deckCount[player] < 1)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
       25:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      418:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      298:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 4 returned 100% blocks executed 100%
        4:  320:int supplyCount(int card, struct gameState *state) {
        4:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 4 returned 100% blocks executed 100%
        4:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        4:  326:  int count = 0;
        -:  327:
       44:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  329:    {
       40:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  331:    }
        -:  332:
       44:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  334:    {
       40:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  336:    }
        -:  337:
       44:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  339:    {
       40:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  341:    }
        -:  342:
        4:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 3 returned 100% blocks executed 82%
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 53 returned 100% blocks executed 85%
       53:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       53:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       16:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       16:  538:    state->deckCount[player] = state->discardCount[player];
       16:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       16:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       16:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       16:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       16:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       16:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       37:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       37:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       37:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       37:  576:    state->deckCount[player]--;
       37:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       37:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 31 returned 100% blocks executed 100%
       31:  583:int getCost(int cardNumber)
        -:  584:{
       31:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 13%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 3%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        4:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
function myAdventurer called 2 returned 100% blocks executed 100%
        2:  646:int myAdventurer(struct gameState *state,  int currentPlayer, int temphand[MAX_HAND]){
        2:  647:	int drawntreasure=0;
        -:  648:	int cardDrawn;
        2:  649:	int z = 0;// this is the counter for the temp hand
        -:  650:	//state = NULL; //old bug that causes seg fault
       18:  651:    while(drawntreasure<6){  // new bug that does not cause seg fault
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       14:  652:	    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        9:  653:	        shuffle(currentPlayer, state);
call    0 returned 100%
        -:  654:	    }
       14:  655:	    drawCard(currentPlayer, state);
call    0 returned 100%
       14:  656:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       14:  657:	    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12:  658:	        drawntreasure++;
        -:  659:	    else{
        2:  660:	        temphand[z]=cardDrawn;
        2:  661:	        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  662:	        z++;
        -:  663:			
        -:  664:	    }
        -:  665:    }
        6:  666:    while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        2:  667:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2:  668:	    z=z-1;
        -:  669:    }
        2:  670:	return 0;
        -:  671:}
        -:  672:
function mySmithy called 1 returned 100% blocks executed 100%
        1:  673:int mySmithy(int currentPlayer, struct gameState *state, int handPos){
        -:  674:    int i;
        -:  675:	 
        -:  676:    //+3 Cards
        -:  677:    //for (i = 0; i < 3; i++) //original code, correct code
       13:  678:	for (i = 0; i < 12; i++) // draw 11 cards always, player always have to  shuffle.
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  679:	{
       12:  680:	    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  681:	}
        -:  682:			
        -:  683:    //discard card from hand
        1:  684:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  685:    return 0;
        -:  686:}  
        -:  687:
function myVillage called 0 returned 0% blocks executed 0%
    #####:  688:int myVillage(int currentPlayer, struct gameState *state, int handPos){
        -:  689:    //+1 Card
        -:  690:	
        -:  691:	  
    #####:  692:	drawCard(currentPlayer, state); //original code
call    0 never executed
        -:  693:	  	
        -:  694:    //+2 Actions
        -:  695:	
        -:  696:    //state->numActions = state->numActions + 2; // original code
    #####:  697:	state->numActions = state->numActions + 5; //Added bug
        -:  698:     //discard played card from hand
    #####:  699:    discardCard(handPos, currentPlayer, state, 0); // original code
call    0 never executed
    #####:  700:	printf("myvilage function");
call    0 never executed
    #####:  701:    return 0;
        -:  702:}
        -:  703:
function myRemodel called 0 returned 0% blocks executed 0%
    #####:  704:int myRemodel(int currentPlayer, int choice1, int choice2, struct gameState *state, int handPos){
        -:  705:    int i;
    #####:  706:	   int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  707:
        -:  708:     //if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) //original code
    #####:  709:	 if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) ) // added bug
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  710:	{
    #####:  711:	  return -1;
        -:  712:	}
        -:  713:
    #####:  714:      gainCard(choice2, state, 0, currentPlayer); //original code
call    0 never executed
        -:  715:
        -:  716:      //discard card from hand
    #####:  717:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  718:
        -:  719:      //discard trashed card
    #####:  720:      for (i = 0; i < state->handCount[currentPlayer]; i++) //original code
branch  0 never executed
branch  1 never executed
        -:  721:	  
        -:  722:	{
    #####:  723:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  724:	    {
    #####:  725:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  726:	      break;
        -:  727:	    }
        -:  728:	}
        -:  729:
    #####:  730:	return 0;
        -:  731:}
        -:  732:
function myMinion called 0 returned 0% blocks executed 0%
    #####:  733:int myMinion(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -:  734:      //+1 action
        -:  735:	 
        -:  736:   	  int i;
        -:  737:	  int j;
        -:  738:      
    #####:  739:	  state->numActions++; //orginal code
        -:  740:	 
        -:  741:			
        -:  742:      //discard card from hand
    #####:  743:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  744:			
    #####:  745:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  746:	{
    #####:  747:	  state->coins = state->coins + 2;
        -:  748:	}
        -:  749:			
    #####:  750:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  751:	{
        -:  752:	  //discard hand
    #####:  753:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  754:	    {
    #####:  755:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  756:	    }
        -:  757:				
        -:  758:	  //draw 4
    #####:  759:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  760:	    {
    #####:  761:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  762:	    }
        -:  763:				
        -:  764:	  //other players discard hand and redraw if hand size > 4
    #####:  765:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  766:	    {
    #####:  767:	      if (i != currentPlayer) //o.c
branch  0 never executed
branch  1 never executed
        -:  768:	
        -:  769:		{
    #####:  770:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  771:		  
        -:  772:		    {
        -:  773:		      //discard hand
    #####:  774:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  775:			{
    #####:  776:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  777:			}
        -:  778:							
        -:  779:		      //draw 4
    #####:  780:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  781:			{
    #####:  782:			  drawCard(i, state);
call    0 never executed
        -:  783:			}
        -:  784:		    }
        -:  785:		}
        -:  786:	    }
        -:  787:				
        -:  788:	}
    #####:  789:      return 0;
        -:  790:
        -:  791:
        -:  792:}
        -:  793:
function cardEffect called 5 returned 100% blocks executed 12%
        5:  794:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  795:{
        -:  796:  int i;
        -:  797:  int j;
        -:  798:  int k;
        -:  799:  int x;
        -:  800:  int index;
        5:  801:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  802:  int nextPlayer = currentPlayer + 1;
        5:  803:  int tributeRevealedCards[2] = {-1, -1};
        -:  804:  int temphand[MAX_HAND];// moved above the if statement
        -:  805:  
        5:  806:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  807:    nextPlayer = 0;
        -:  808:  }
        -:  809:  
        -:  810:	
        -:  811:  //uses switch to select card and perform actions
        5:  812:  switch( card ) 
branch  0 taken 40%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 20%
branch 19 taken 0%
branch 20 taken 0%
        -:  813:    {
        -:  814:    case adventurer:
        -:  815:      /*while(drawntreasure<2){
        -:  816:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  817:	  shuffle(currentPlayer, state);
        -:  818:	}
        -:  819:	drawCard(currentPlayer, state);
        -:  820:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  821:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  822:	  drawntreasure++;
        -:  823:	else{
        -:  824:	  temphand[z]=cardDrawn;
        -:  825:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  826:	  z++;
        -:  827:	}
        -:  828:      }
        -:  829:      while(z-1>=0){
        -:  830:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  831:	z=z-1;
        -:  832:      }*/
        2:  833:	  myAdventurer(state, currentPlayer, temphand);
call    0 returned 100%
        2:  834:      return 0;
        -:  835:	  
        -:  836:	 
        -:  837:		 case council_room:
        -:  838:      //+4 Cards
        5:  839:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  840:	{
        4:  841:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  842:	}
        -:  843:			
        -:  844:      //+1 Buy
        1:  845:      state->numBuys++;
        -:  846:			
        -:  847:      //Each other player draws a card
        5:  848:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  849:	{
        4:  850:	  if ( i != currentPlayer )
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  851:	    {
        3:  852:	      drawCard(i, state);
call    0 returned 100%
        -:  853:	    }
        -:  854:	}
        -:  855:			
        -:  856:      //put played card in played card pile
        1:  857:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  858:			
        1:  859:      return 0;
        -:  860:			
        -:  861:    case feast:
        -:  862:      //gain card with cost up to 5
        -:  863:      //Backup hand
    #####:  864:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  865:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  866:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  867:      }
        -:  868:      //Backup hand
        -:  869:
        -:  870:      //Update Coins for Buy
    #####:  871:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  872:      x = 1;//Condition to loop on
    #####:  873:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  874:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  875:	  if (DEBUG)
        -:  876:	    printf("None of that card left, sorry!\n");
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  880:	  }
        -:  881:	}
    #####:  882:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  883:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  887:	  }
        -:  888:	}
        -:  889:	else{
        -:  890:
        -:  891:	  if (DEBUG){
        -:  892:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  893:	  }
        -:  894:
    #####:  895:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  896:	  x = 0;//No more buying cards
        -:  897:
        -:  898:	  if (DEBUG){
        -:  899:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  900:	  }
        -:  901:
        -:  902:	}
        -:  903:      }     
        -:  904:
        -:  905:      //Reset Hand
    #####:  906:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  907:	state->hand[currentPlayer][i] = temphand[i];
    #####:  908:	temphand[i] = -1;
        -:  909:      }
        -:  910:      //Reset Hand
        -:  911:      			
    #####:  912:      return 0;
        -:  913:			
        -:  914:    case gardens:
    #####:  915:      return -1;
        -:  916:			
        -:  917:    case mine:
    #####:  918:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  919:
    #####:  920:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  921:	{
    #####:  922:	  return -1;
        -:  923:	}
        -:  924:		
    #####:  925:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  926:	{
    #####:  927:	  return -1;
        -:  928:	}
        -:  929:
    #####:  930:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  931:	{
    #####:  932:	  return -1;
        -:  933:	}
        -:  934:
    #####:  935:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  936:
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  939:
        -:  940:      //discard trashed card
    #####:  941:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  946:	      break;
        -:  947:	    }
        -:  948:	}
        -:  949:			
    #####:  950:      return 0;
        -:  951:			
        -:  952:    case remodel:
        -:  953:     /* j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  954:
        -:  955:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  956:	{
        -:  957:	  return -1;
        -:  958:	}
        -:  959:
        -:  960:      gainCard(choice2, state, 0, currentPlayer);
        -:  961:
        -:  962:      //discard card from hand
        -:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
        -:  965:      //discard trashed card
        -:  966:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  967:	{
        -:  968:	  if (state->hand[currentPlayer][i] == j)
        -:  969:	    {
        -:  970:	      discardCard(i, currentPlayer, state, 0);			
        -:  971:	      break;
        -:  972:	    }
        -:  973:	}
        -:  974:
        -:  975:
        -:  976:      return 0;*/
        -:  977:	
    #####:  978:    myRemodel(currentPlayer, choice1, choice2, state, handPos);
call    0 never executed
    #####:  979:    return 0;
        -:  980:	
        -:  981:    case smithy:
        -:  982:      //+3 Cards
        -:  983:    /*  for (i = 0; i < 3; i++)
        -:  984:	{
        -:  985:	  drawCard(currentPlayer, state);
        -:  986:	}
        -:  987:			
        -:  988:      //discard card from hand
        -:  989:      discardCard(handPos, currentPlayer, state, 0);
        -:  990:      return 0;*/
        -:  991:	  
        1:  992:	  mySmithy(currentPlayer, state, handPos);
call    0 returned 100%
        1:  993:	  return 0;
        -:  994:		
        -:  995:    case village:
        -:  996:      //+1 Card
        -:  997:      /*drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+2 Actions
        -: 1000:      state->numActions = state->numActions + 2;
        -: 1001:			
        -: 1002:      //discard played card from hand
        -: 1003:      discardCard(handPos, currentPlayer, state, 0);
        -: 1004:      return 0;*/
        -: 1005:	  
    #####: 1006:	  myVillage(currentPlayer, state, handPos);
call    0 never executed
    #####: 1007:	  return 0;
        -: 1008:		
        -: 1009:    case baron:
    #####: 1010:      state->numBuys++;//Increase buys by 1!
    #####: 1011:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1012:	int p = 0;//Iterator for hand!
    #####: 1013:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1014:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1015:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1016:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1017:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1018:	    state->discardCount[currentPlayer]++;
    #####: 1019:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1020:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1021:	    }
    #####: 1022:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1023:	    state->handCount[currentPlayer]--;
    #####: 1024:	    card_not_discarded = 0;//Exit the loop
        -: 1025:	  }
    #####: 1026:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1027:	    if(DEBUG) {
        -: 1028:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1029:	      printf("Must gain an estate if there are any\n");
        -: 1030:	    }
    #####: 1031:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1032:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1033:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1034:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1035:		isGameOver(state);
call    0 never executed
        -: 1036:	      }
        -: 1037:	    }
    #####: 1038:	    card_not_discarded = 0;//Exit the loop
        -: 1039:	  }
        -: 1040:			    
        -: 1041:	  else{
    #####: 1042:	    p++;//Next card
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:			    
        -: 1047:      else{
    #####: 1048:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1049:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1050:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1051:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1052:	    isGameOver(state);
call    0 never executed
        -: 1053:	  }
        -: 1054:	}
        -: 1055:      }
        -: 1056:	    
        -: 1057:      
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case great_hall:
        -: 1061:      //+1 Card
    #####: 1062:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1063:			
        -: 1064:      //+1 Actions
    #####: 1065:      state->numActions++;
        -: 1066:			
        -: 1067:      //discard card from hand
    #####: 1068:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case minion:
        -: 1072:      //+1 action
        -: 1073:     /* state->numActions++;
        -: 1074:			
        -: 1075:      //discard card from hand
        -: 1076:      discardCard(handPos, currentPlayer, state, 0);
        -: 1077:			
        -: 1078:      if (choice1)		//+2 coins
        -: 1079:	{
        -: 1080:	  state->coins = state->coins + 2;
        -: 1081:	}
        -: 1082:			
        -: 1083:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1084:	{
        -: 1085:	  //discard hand
        -: 1086:	  while(numHandCards(state) > 0)
        -: 1087:	    {
        -: 1088:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1089:	    }
        -: 1090:				
        -: 1091:	  //draw 4
        -: 1092:	  for (i = 0; i < 4; i++)
        -: 1093:	    {
        -: 1094:	      drawCard(currentPlayer, state);
        -: 1095:	    }
        -: 1096:				
        -: 1097:	  //other players discard hand and redraw if hand size > 4
        -: 1098:	  for (i = 0; i < state->numPlayers; i++)
        -: 1099:	    {
        -: 1100:	      if (i != currentPlayer)
        -: 1101:		{
        -: 1102:		  if ( state->handCount[i] > 4 )
        -: 1103:		    {
        -: 1104:		      //discard hand
        -: 1105:		      while( state->handCount[i] > 0 )
        -: 1106:			{
        -: 1107:			  discardCard(handPos, i, state, 0);
        -: 1108:			}
        -: 1109:							
        -: 1110:		      //draw 4
        -: 1111:		      for (j = 0; j < 4; j++)
        -: 1112:			{
        -: 1113:			  drawCard(i, state);
        -: 1114:			}
        -: 1115:		    }
        -: 1116:		}
        -: 1117:	    }
        -: 1118:				
        -: 1119:	}
        -: 1120:      return 0;*/
        -: 1121:	  
    #####: 1122:	myMinion(state, handPos, currentPlayer, choice1, choice2);
call    0 never executed
    #####: 1123:	return 0;
        -: 1124:		
        -: 1125:    case steward:
    #####: 1126:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1127:	{
        -: 1128:	  //+2 cards
    #####: 1129:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1130:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1131:	}
    #####: 1132:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1133:	{
        -: 1134:	  //+2 coins
    #####: 1135:	  state->coins = state->coins + 2;
        -: 1136:	}
        -: 1137:      else
        -: 1138:	{
        -: 1139:	  //trash 2 cards in hand
    #####: 1140:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1141:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1142:	}
        -: 1143:			
        -: 1144:      //discard card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case tribute:
    #####: 1149:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1150:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1151:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1152:	  state->deckCount[nextPlayer]--;
        -: 1153:	}
    #####: 1154:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1155:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1156:	  state->discardCount[nextPlayer]--;
        -: 1157:	}
        -: 1158:	else{
        -: 1159:	  //No Card to Reveal
        -: 1160:	  if (DEBUG){
        -: 1161:	    printf("No cards to reveal\n");
        -: 1162:	  }
        -: 1163:	}
        -: 1164:      }
        -: 1165:	    
        -: 1166:      else{
    #####: 1167:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1168:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1169:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1170:	    state->deckCount[nextPlayer]++;
    #####: 1171:	    state->discard[nextPlayer][i] = -1;
    #####: 1172:	    state->discardCount[nextPlayer]--;
        -: 1173:	  }
        -: 1174:			    
    #####: 1175:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1176:	} 
    #####: 1177:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1178:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1179:	state->deckCount[nextPlayer]--;
    #####: 1180:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1181:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1182:	state->deckCount[nextPlayer]--;
        -: 1183:      }    
        -: 1184:		       
    #####: 1185:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1186:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1187:	state->playedCardCount++;
    #####: 1188:	tributeRevealedCards[1] = -1;
        -: 1189:      }
        -: 1190:
    #####: 1191:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1192:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1193:	  state->coins += 2;
        -: 1194:	}
        -: 1195:		    
    #####: 1196:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1197:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1198:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1199:	}
        -: 1200:	else{//Action Card
    #####: 1201:	  state->numActions = state->numActions + 2;
        -: 1202:	}
        -: 1203:      }
        -: 1204:	    
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case ambassador:
    #####: 1208:      j = 0;		//used to check if player has enough cards to discard
        -: 1209:
    #####: 1210:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1211:	{
    #####: 1212:	  return -1;				
        -: 1213:	}
        -: 1214:
    #####: 1215:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  return -1;
        -: 1218:	}
        -: 1219:
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1221:	{
    #####: 1222:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1223:	    {
    #####: 1224:	      j++;
        -: 1225:	    }
        -: 1226:	}
    #####: 1227:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1228:	{
    #####: 1229:	  return -1;				
        -: 1230:	}
        -: 1231:
        -: 1232:      if (DEBUG) 
        -: 1233:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1234:
        -: 1235:      //increase supply count for choosen card by amount being discarded
    #####: 1236:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1237:			
        -: 1238:      //each other player gains a copy of revealed card
    #####: 1239:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1244:	    }
        -: 1245:	}
        -: 1246:
        -: 1247:      //discard played card from hand
    #####: 1248:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1249:
        -: 1250:      //trash copies of cards returned to supply
    #####: 1251:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1252:	{
    #####: 1253:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1254:	    {
    #####: 1255:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1256:		{
    #####: 1257:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1258:		  break;
        -: 1259:		}
        -: 1260:	    }
        -: 1261:	}			
        -: 1262:
    #####: 1263:      return 0;
        -: 1264:		
        -: 1265:    case cutpurse:
        -: 1266:
    #####: 1267:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1268:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1269:	{
    #####: 1270:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1271:	    {
    #####: 1272:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1273:		{
    #####: 1274:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1275:		    {
    #####: 1276:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1277:		      break;
        -: 1278:		    }
    #####: 1279:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1280:		    {
    #####: 1281:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1282:			{
        -: 1283:			  if (DEBUG)
        -: 1284:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1285:			}	
    #####: 1286:		      break;
        -: 1287:		    }		
        -: 1288:		}
        -: 1289:					
        -: 1290:	    }
        -: 1291:				
        -: 1292:	}				
        -: 1293:
        -: 1294:      //discard played card from hand
    #####: 1295:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1296:
    #####: 1297:      return 0;
        -: 1298:
        -: 1299:		
        -: 1300:    case embargo: 
        -: 1301:      //+2 Coins
    #####: 1302:      state->coins = state->coins + 2;
        -: 1303:			
        -: 1304:      //see if selected pile is in play
    #####: 1305:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1306:	{
    #####: 1307:	  return -1;
        -: 1308:	}
        -: 1309:			
        -: 1310:      //add embargo token to selected supply pile
    #####: 1311:      state->embargoTokens[choice1]++;
        -: 1312:			
        -: 1313:      //trash card
    #####: 1314:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1315:      return 0;
        -: 1316:		
        -: 1317:    case outpost:
        -: 1318:      //set outpost flag
    #####: 1319:      state->outpostPlayed++;
        -: 1320:			
        -: 1321:      //discard card
    #####: 1322:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1323:      return 0;
        -: 1324:		
        -: 1325:    case salvager:
        -: 1326:      //+1 buy
    #####: 1327:      state->numBuys++;
        -: 1328:			
    #####: 1329:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1330:	{
        -: 1331:	  //gain coins equal to trashed card
    #####: 1332:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1333:	  //trash card
    #####: 1334:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1335:	}
        -: 1336:			
        -: 1337:      //discard card
    #####: 1338:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1339:      return 0;
        -: 1340:		
        -: 1341:    case sea_hag:
        5: 1342:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4: 1343:	if (i != currentPlayer){
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3: 1344:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1345:	  state->discardCount[i]++;
        3: 1346:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1347:	}
        -: 1348:      }
        1: 1349:      return 0;
        -: 1350:		
        -: 1351:    case treasure_map:
        -: 1352:      //search hand for another treasure_map
    #####: 1353:      index = -1;
    #####: 1354:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1355:	{
    #####: 1356:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1357:	    {
    #####: 1358:	      index = i;
    #####: 1359:	      break;
        -: 1360:	    }
        -: 1361:	}
    #####: 1362:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1363:	{
        -: 1364:	  //trash both treasure cards
    #####: 1365:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1366:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1367:
        -: 1368:	  //gain 4 Gold cards
    #####: 1369:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1370:	    {
    #####: 1371:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1372:	    }
        -: 1373:				
        -: 1374:	  //return success
    #####: 1375:	  return 1;
        -: 1376:	}
        -: 1377:			
        -: 1378:      //no second treasure_map found in hand
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:	
    #####: 1382:  return -1;
        -: 1383:}
        -: 1384:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1385:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1386:{
        -: 1387:	
        -: 1388:  //if card is not trashed, added to Played pile 
        2: 1389:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1390:    {
        -: 1391:      //add card to played pile
        2: 1392:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1393:      state->playedCardCount++;
        -: 1394:    }
        -: 1395:	
        -: 1396:  //set played card to -1
        2: 1397:  state->hand[currentPlayer][handPos] = -1;
        -: 1398:	
        -: 1399:  //remove card from player's hand
        2: 1400:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1401:    {
        -: 1402:      //reduce number of cards in hand
    #####: 1403:      state->handCount[currentPlayer]--;
        -: 1404:    }
        2: 1405:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1406:    {
        -: 1407:      //reduce number of cards in hand
    #####: 1408:      state->handCount[currentPlayer]--;
        -: 1409:    }
        -: 1410:  else 	
        -: 1411:    {
        -: 1412:      //replace discarded card with last card in hand
        2: 1413:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1414:      //set last card to -1
        2: 1415:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1416:      //reduce number of cards in hand
        2: 1417:      state->handCount[currentPlayer]--;
        -: 1418:    }
        -: 1419:	
        2: 1420:  return 0;
        -: 1421:}
        -: 1422:
function gainCard called 1 returned 100% blocks executed 70%
        1: 1423:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1424:{
        -: 1425:  //Note: supplyPos is enum of choosen card
        -: 1426:	
        -: 1427:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1428:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1429:    {
    #####: 1430:      return -1;
        -: 1431:    }
        -: 1432:	
        -: 1433:  //added card for [whoseTurn] current player:
        -: 1434:  // toFlag = 0 : add to discard
        -: 1435:  // toFlag = 1 : add to deck
        -: 1436:  // toFlag = 2 : add to hand
        -: 1437:
        1: 1438:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1439:    {
    #####: 1440:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1441:      state->deckCount[player]++;
        -: 1442:    }
        1: 1443:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1444:    {
    #####: 1445:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1446:      state->handCount[player]++;
        -: 1447:    }
        -: 1448:  else
        -: 1449:    {
        1: 1450:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1451:      state->discardCount[player]++;
        -: 1452:    }
        -: 1453:	
        -: 1454:  //decrease number in supply pile
        1: 1455:  state->supplyCount[supplyPos]--;
        -: 1456:	 
        1: 1457:  return 0;
        -: 1458:}
        -: 1459:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1460:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1461:{
        -: 1462:  int i;
        -: 1463:	
        -: 1464:  //reset coin count
        4: 1465:  state->coins = 0;
        -: 1466:
        -: 1467:  //add coins for each Treasure card in player's hand
       24: 1468:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1469:    {
       20: 1470:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1471:	{
       16: 1472:	  state->coins += 1;
        -: 1473:	}
        4: 1474:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1475:	{
    #####: 1476:	  state->coins += 2;
        -: 1477:	}
        4: 1478:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1479:	{
    #####: 1480:	  state->coins += 3;
        -: 1481:	}	
        -: 1482:    }	
        -: 1483:
        -: 1484:  //add bonus
        4: 1485:  state->coins += bonus;
        -: 1486:
        4: 1487:  return 0;
        -: 1488:}
        -: 1489:
        -: 1490:
        -: 1491://end of dominion.c
